---
interface Props {
  class?: string
}

const { class: className } = Astro.props
---

<canvas id="sun" class:list={[className]}></canvas>

<script>
  import * as THREE from "three"

  import type { Theme } from "@/consts/theme"
  import { renderingManager, setupRenderer } from "@/webgl/renderer"
  import { fragmentPerlin, vertexPerlin } from "@/webgl/shaders/perlin"
  import { fragmentSun, vertexSun } from "@/webgl/shaders/sun"
  import { FresnelMaterial } from "@/webgl/utils"

  const canvas = document.getElementById("sun") as HTMLCanvasElement

  const { scene, camera, renderer, group, geometry } = setupRenderer(canvas)

  const cubeRenderer = new THREE.WebGLCubeRenderTarget(256, {
    format: THREE.RGBFormat,
    generateMipmaps: true,
    minFilter: THREE.LinearMipmapLinearFilter,
  })
  const cubeScene = new THREE.Scene()
  const cubeCamera = new THREE.CubeCamera(0.1, 10, cubeRenderer)

  function addPerlin() {
    const material = new THREE.ShaderMaterial({
      side: THREE.DoubleSide,
      uniforms: {
        uTime: { value: 0 },
      },
      vertexShader: vertexPerlin,
      fragmentShader: fragmentPerlin,
    })
    const mesh = new THREE.Mesh(geometry, material)
    cubeScene.add(mesh)
    return material
  }

  function addSunMesh() {
    const material = new THREE.ShaderMaterial({
      uniforms: {
        uTime: { value: 0 },
        uPerlin: { value: null },
      },
      vertexShader: vertexSun,
      fragmentShader: fragmentSun,
    })
    const mesh = new THREE.Mesh(geometry, material)
    group.add(mesh)
    return material
  }

  function addFresnelEffect() {
    const material = FresnelMaterial({
      fresnelColor: 0xff9a02,
      baseColor: 0xfd0707,
      intensity: 2.8,
    })
    const mesh = new THREE.Mesh(geometry, material)
    mesh.scale.setScalar(1.01)
    group.add(mesh)
  }

  const perlin = addPerlin()
  const sun = addSunMesh()
  addFresnelEffect()

  function animation() {
    perlin.uniforms.uTime.value += 0.05
    sun.uniforms.uTime.value += 0.05
    sun.uniforms.uPerlin.value = cubeRenderer.texture
    cubeCamera.update(renderer, cubeScene)
  }

  const {
    startRendering,
    stopRendering,
    initRendering,
    reducedMotionPreference,
  } = renderingManager(scene, camera, renderer, animation)

  function handleThemeToggled(theme: Theme) {
    if (theme === "dark" || !reducedMotionPreference.matches) stopRendering()
    else startRendering()
  }

  initRendering()
  handleThemeToggled(window.getThemePreference())
  document.addEventListener("themetoggled", (event) =>
    handleThemeToggled(event.detail.theme)
  )
</script>
